import asyncio
import time
from Agent.code_executor_agent import coderagent

async def test_code_executor():
    """测试代码执行器全流程"""
    print("=== 开始测试代码执行器 ===")
    start_time = time.time()
    
    
    # 简化测试数据
    problem_text = "C 题 农作物的种植策略根据乡村的实际情况，充分利用有限的耕地资源，因地制宜，发展有机种植产业，对乡村经济的可持续发展具有重要的现实意义。选择适宜的农作物，优化种植策略，有利于方便田间管理，提高生产效益，减少各种不确定因素可能造成的种植风险。某乡村地处华北山区，常年温度偏低，大多数耕地每年只能种植一季农作物。该乡村现有露天耕地 1201 亩，分散为 34 个大小不同的地块，包括平旱地、梯田、山坡地和水浇地 4 种类型。平旱地、梯田和山坡地适宜每年种植一季粮食类作物；水浇地适宜每年种植一季水稻或两季蔬菜。该乡村另有 16 个普通大棚和 4 个智慧大棚，每个大棚耕地面积为 0.6 亩。普通大棚适宜每年种植一季蔬菜和一季食用菌，智慧大棚适宜每年种植两季蔬菜。同一地块（含大棚）每季可以合种不同的作物。详见附件 1。根据农作物的生长规律，每种作物在同一地块（含大棚）都不能连续重茬种植，否则会减产；因含有豆类作物根菌的土壤有利于其他作物生长，从 2023 年开始要求每个地块（含大棚）的所有土地三年内至少种植一次豆类作物。同时，种植方案应考虑到方便耕种作业和田间管理，譬如：每种作物每季的种植地不能太分散，每种作物在单个地块（含大棚）种植的面积不宜太小，等等。2023年的农作物种植和相关统计数据见附件 2。请建立数学模型，研究下列问题：问题 1 假定各种农作物未来的预期销售量、种植成本、亩产量和销售价格相对于 2023 年保持稳定，每季种植的农作物在当季销售。如果某种作物每季的总产量超过相应的预期销售量，超过部分不能正常销售。请针对以下两种情况，分别给出该乡村 2024~2030 年农作物的最优种植方案，将结果分别填入 result1_1.xlsx 和 result1_2.xlsx 中（模板文件见附件 3）。(1) 超过部分滞销，造成浪费；(2) 超过部分按 2023 年销售价格的 50%降价出售。问题 2 根据经验，小麦和玉米未来的预期销售量有增长的趋势，平均年增长率介于5%~10%之间，其他农作物未来每年的预期销售量相对于 2023 年大约有±5%的变化。农作物的亩产量往往会受气候等因素的影响，每年会有±10%的变化。因受市场条件影响，农作物的种植成本平均每年增长5%左右。粮食类作物的销售价格基本稳定；蔬菜类作物的销售价格有增长的趋势，平均每年增长5%左右。食用菌的销售价格稳中有降，大约每年可下降1%~5%，特别是羊肚菌的销售价格每年下降幅度为5%。请综合考虑各种农作物的预期销售量、亩产量、种植成本和销售价格的不确定性以及潜在的种植风险，给出该乡村 2024~2030 年农作物的最优种植方案，将结果填入 result2.xlsx 中（模板文件见附件 3）。问题 3 在现实生活中，各种农作物之间可能存在一定的可替代性和互补性，预期销售量与销售价格、种植成本之间也存在一定的相关性。请在问题 2 的基础上综合考虑相关因素，给出该乡村2024~2030 年农作物的最优种植策略，通过模拟数据进行求解，并与问题 2 的结果作比较分析。附件 1 乡村现有耕地和农作物的基本情况附件 2 2023 年乡村农作物种植和相关统计数据附件 3 须提交结果的模板文件（result1_1.xlsx，result1_2.xlsx，result2.xlsx）"
    analysis_result ={
  "问题背景": "该乡村地处华北山区，常年温度偏低，现有露天耕地1201亩（34个地块：平旱地、梯田、山坡地、水浇地）和20个大棚（16个普通棚+4个智慧棚）。地块类型决定种植模式：平旱地/梯田/山坡地每年一季粮食作物；水 浇地每年一季水稻或两季蔬菜；普通棚每年一季蔬菜+一季食用菌；智慧棚每年两季蔬菜。约束条件包括：禁止连续重茬种植、每地块三年内至少种一次豆类作物、种植需集中化（地块分散度和最小面积限制）。目标是在2024-2030年优化种植方案以最大化经济效益。",

  "问题一分析": "需针对两种销售场景建立确定性优化模型。场景1：超产部分完全浪费；场景2：超产部分按50%价 格销售。核心是最大化利润（收入-成本），约束包括地块适应性、重茬限制、豆类轮作要求及管理便利性。采用混合整数规划（MIP），决策变量为各地块每季作物种植面积。目标函数为：场景1利润 = Σ[min(产量,预期销量)×价格 - 成本]；场景2利润 = Σ[min(产量,预期销量)×价格 + max(产量-预期销量,0)×0.5×价格 - 成本]。参考线性规划在农 业优化中的应用（https://www.sciencedirect.com/topics/agricultural-and-biological-sciences/linear-programming）。",

  "问题二分析": "引入不确定性因素：小麦玉米销量年增5-10%，其他作物销量±5%波动，亩产±10%波动，种植成本年增5%，蔬菜价格年增5%，食用菌价格年降1-5%（羊肚菌固定降5%）。采用随机规划框架，通过蒙特卡洛模拟生成1000 个随机场景（销量、亩产、成本、价格服从均匀分布），优化期望利润并控制风险。目标函数扩展为：max E[利润] - λ×Var[利润]，其中λ为风险厌恶系数。关键是将问题1的MIP转化为两阶段随机规划，第一阶段决定种植面积，第二阶段调整销售策略。参考随机优化在农业风险管理中的应用（https://link.springer.com/article/10.1007/s10479-022-04903-0）。",

  "问题三分析": "在问题2基础上增加作物间相关性：1) 可替代性（如小麦/玉米价格弹性交叉影响销量）；2) 互补性（如豆类固氮效应提升相邻地块产量）；3) 价格-销量负相关（需求弹性）。建立集成模型：销量 = f(自身价格, 替代品价格) + 随机项，采用对数线性需求函数：log(Q_i) = α_i - β_i log(P_i) + Σγ_ij log(P_j)。通过附件2数据回归估计弹性系数。与问题2结果比较时，重点分析弹性引入对高替代性作物（如小麦/玉米）种植面积的影响。参 考农业需求系统模型（https://www.jstor.org/stable/1242550）。",

  "详细解题步骤": {
    "1、观察数据": "使用pandas读取数据文件，详细了解各个工作表的结构，内容，列名，索引等，可以按照需要了解数据正态性，缺失值，异常值等。注意一定要详细，特别是列名，索，本步骤必须编写程序并调用代码执行工具求解完成",
    
    "2. 数据预处理：": "数据eda分析、可视化等，请在上一步观察结果的基础上进行可视化和eda分析",
    
    "3. 问题1求解：": "构建MIP模型（决策变量：x[i,t,c,s] = 地块i年t季s作物c的种植面积）\n约束集：\n* 面积约束：Σx ≤ 地块面积\n* 类型约束：x=0 当作物c不适配地块i\n* 重茬约束：x[i,t,c,s] × x[i,t+1,c,s] = 0\n* 豆类约束：∀i, ∀t∈[2024,2026], Σ_{c∈豆类} Σ_{s} x[i,t,c,s] + x[i,t+1,c,s] + x[i,t+2,c,s] ≥ 1\n* 管理约束：∀c,t,s，种植地块数 ≤ max_disperse；∀i,c,t,s，x[i,t,c,s] ≥ 0.1 或 =0\n求解器：Gurobi/Cplex，输出result1_1.xlsx（场景1）和result1_2.xlsx（场景2）",
    
    "4. 问题2求解：": "随机参数生成（示例）：小麦销量 = 2023销量 × (1 + 0.075×t + U(-0.05,0.05))^t\n两阶段优化：\nStage1: 固定种植计划\nStage2: 各场景下计算超产损失\n目标：max (1/N)Σ_{k=1}^N Profit_k - 0.5×Var(Profit)\n结果填入result2.xlsx",
    
    "5. 问题3求解：": "扩展需求函数：Q_{c,t} = Q0_{c,t} × (P_{c,t}/P0_{c,t})^{-β_c} × Π_{j≠c} (P_{j,t}/P0_{j,t})^{γ_{cj}}\n基于附件2估计β_c（自价格弹性）和γ_{cj}（交叉弹性），例如：\n玉米对小麦的γ_玉米,小麦 = 0.3（替代品）\n迭代求解：先固定价格求种植量 → 更新市场均衡价格 → 重新优化，直至收敛\n与问题2对比：分析弹性引入导致的高弹性作物（蔬菜）面积减少5-10%，豆类因正外部性面积增加8%",
    
    "6. 敏感性分析：": "关键参数：豆类约束周期（3年→2年可提升利润12%）、风险厌恶系数λ（λ>1时利润波动降40%但期望利润降8%）"
  }
}
    excel_path = "D:\pythonproject\data_science\excel_files"
    
    # 执行任务
    result = await coderagent.execute_task(
        problem_text=problem_text,
        analysis_result=analysis_result,
        excel_path=excel_path
    )
    
    # 检查结果
    print("\n=== 测试结果 ===")
    print(f"1. 数据探查: {'成功' if result.get('data_overview') else '失败'}")
    print(f"2. 代码生成: {'成功' if result.get('draft_code') else '失败'}")
    print(f"3. 执行结果: {'成功' if result.get('execution_result') else '失败'}")
    print(f"4. 代码优化: {'成功' if result.get('final_code') else '失败'}")
    
    print(f"\n总执行时间: {time.time() - start_time:.2f}秒")

if __name__ == "__main__":
    asyncio.run(test_code_executor())
